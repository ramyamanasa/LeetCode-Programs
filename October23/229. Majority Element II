//Attempt - 1 -- find count of each element
// Problem -- returns duplicate values

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        vector<int>arr;
        
        int n = nums.size() ;
        
  
        for(int i=0; i<n; i++){
            
            vector<bool>visited(n,false);
            
            if(visited[i] == true){
                continue;
            }
            
            int count=1;
            
            for(int j=i+1; j<n; j++){
                if (nums[i] == nums[j]){
                    visited[j] = true;
                    count++;
                }
            }
            
            if(count > n/3){
                arr.push_back(nums[i]);
            }
        }
        
        return arr;
        
    }
};


//Attempt - 2
//Taking unique values and putting in another vector cause have to return in vector not set

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> arr;
        int n = nums.size();

        for(int i = 0; i < n; i++) {
            vector<bool> visited(n, false);

            if (visited[i]) {
                continue;
            }

            int count = 1;

            for(int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j]) {
                    visited[j] = true;
                    count++;
                }
            }

            if (count > n / 3) {
                bool alreadyAdded = false;
                for (int k = 0; k < arr.size(); k++) {
                    if (arr[k] == nums[i]) {
                        alreadyAdded = true;
                        break;
                    }
                }
                if (!alreadyAdded) {
                    arr.push_back(nums[i]);
                }
            }
        }

        return arr;
    }
};



//Attempt - 3 
//keep track of unique values using a set then if value already found continue and goes to the end of the code skipping the nums[i]

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> arr;
        int n = nums.size();
        unordered_set<int> uniqueElements; // To keep track of unique elements

        for(int i = 0; i < n; i++) {
            if (uniqueElements.find(nums[i]) != uniqueElements.end()) {
                continue; // Skip if the element is already in arr
            }

            int count = 1;

            for(int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }

            if (count > n / 3) {
                arr.push_back(nums[i]);
                uniqueElements.insert(nums[i]);
            }
        }

        return arr;
    }
};


//Attempt - 4 Codestory with mik Boyer Moore Voting Algorithm

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        
        int maj1    = NULL;
        int count1 = 0;

        int maj2    = NULL;
        int count2 = 0;
        int freq = floor(n/3);
        
        for(int i = 0; i<n; i++) {
            if(nums[i] == maj1)
                count1++;
            else if(nums[i] == maj2)
                count2++;
            else if(count1 == 0) {
                maj1 = nums[i];
                count1 = 1;
            } else if(count2 == 0) {
                maj2 = nums[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        
        vector<int> result; //because atmost two elements can occur more than ⌊ n/3 ⌋ in an array of length n
        count1 = 0;
        count2 = 0;
        for(int num:nums) {
            if(num == maj1)
                count1++;
            else if(num == maj2)
                count2++;
        }
        if(count1 > floor(n/3))
            result.push_back(maj1);
        if(count2 > floor(n/3))
            result.push_back(maj2);
        return result;


    }
};

